{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RavyAPI.py","text":"<p>A simple and dynamic asynchronous Python wrapper for the Ravy API.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Easy usability</li> <li>100% API coverage</li> <li>Unit tested (soon\u2122\ufe0f)</li> <li>Pyright type compatible</li> </ul>"},{"location":"#installation","title":"Installation","text":"<ul> <li>Compatible with Python 3.8+</li> <li>Not yet available on PyPI</li> </ul> <pre><code>python3 -m pip install git+https://github.com/GoogolGenius/RavyAPI.py.git\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code># Import required packages\nimport asyncio\n\nimport ravyapi\n\n\nasync def main() -&gt; None:\n    # Construct a ravyapi client object\n    client = ravyapi.Client(\"token\")  # Replace \"token\" with your API key\n\n    # Make a simple request to get token information\n    token_info = await client.tokens.get_token()\n    print(token_info.token_type)  # Print the token type: \"ravy\" | \"ksoft\"\n\n    # Close and teardown the client\n    await client.close()\n\n\n# Start the event loop and run the main function\nasyncio.run(main())\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>Feel free to create pull requests and issues. Just be civil, kind, and respectful.</p> <p>This is my first library, so if you have any suggestions or questions, please let me know! Reach out via GitHub Issues or Discord <code>@googolgenius</code>.</p>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#quick-example","title":"Quick Example","text":"<pre><code># Import required packages\nimport asyncio\n\nimport ravyapi\n\n\nasync def main() -&gt; None:\n    # Construct a ravyapi client object\n    client = ravyapi.Client(\"token\")  # Replace \"token\" with your API key\n\n    # Make a simple request to get token information\n    token_info = await client.tokens.get_token()\n    print(token_info.token_type)  # Print the token type: \"ravy\" | \"ksoft\"\n\n    # Close and teardown the client\n    await client.close()\n\n\n# Start the event loop and run the main function\nasyncio.run(main())\n</code></pre>"},{"location":"getting_started/#ksoft-tokens","title":"KSoft Tokens","text":"<p>If you have a KSoft token, you can simply pass it to the constructor for the <code>ravyapi.client.Client</code>. Please note that KSoft tokens are not compatible with any endpoints other than <code>ksoft</code> and <code>tokens</code>.</p>"},{"location":"getting_started/#phisherman-token","title":"Phisherman Token","text":"<p>You might have noticed there is no available kwarg to set the phisherman.gg token using the <code>urls</code> endpoint. This is because you can instead set it directly to the <code>ravyapi.client.Client</code> using the <code>ravyapi.client.Client.set_phisherman_token()</code> method. This also returns the <code>ravyapi.client.Client</code> object so you can chain calls.</p> <pre><code># Assume boilerplate is already set up\nclient = ravyapi.Client(\"token\").set_phisherman_token(\"phisherman_token\")\nwebsite_info = await client.urls.get_website(\"https://example.com\")\n</code></pre>"},{"location":"getting_started/#permissions","title":"Permissions","text":"<p>The API wrapper automatically validates your token's permissions upon the first method call. If you attempt to use an API method that you do not have permission to use, the library will raise a <code>ravyapi.api.errors.AccessException</code>. This information is currently stored internally, but not publicly accessible. To manually check for permissions, call the <code>ravyapi.client.Client.tokens.get_token()</code> method and use the <code>access</code> property.</p> <pre><code># Assume boilerplate is already set up\ntoken_info = await client.tokens.get_token()\npermissions = token_info.access\n</code></pre>"},{"location":"getting_started/#error-handling","title":"Error Handling","text":"<p>You can catch the defined errors in the <code>ravyapi.api.errors</code> module and handle them appropriately.</p> <pre><code># Assume boilerplate is already set up\ntry:\n    token_info = await client.tokens.get_token()\nexcept ravyapi.HTTPException as e:  # Generic HTTP error\n    if e.status == 429:\n        print(f\"Encountered {e.status}: we are being ratelimited by Cloudflare!\")\n    else:\n        print(f\"Encountered HTTP error: ({e.status}) - {e.exc_data}!\")\n\ntry:\n    website_info = await client.urls.get_website(\"https://example.com\")\nexcept ravyapi.AccessException as e:  # Access denied\n    print(f\"This errored as the endpoint route needed {e.required} permission!\")\n</code></pre>"},{"location":"getting_started/#more-information","title":"More Information","text":"<p>Check the API reference for more information as well as the official Ravy API documentation:</p> <p>Reference Ravy Docs</p>"},{"location":"reference/client/","title":"Client","text":"<p>Module containing the client interfacing for interactions.</p>"},{"location":"reference/client/#ravyapi.client.Client","title":"Client","text":"<p>The client interface for interacting with the Ravy API.</p> <p>Attributes:</p> Name Type Description <code>closed</code> <code>bool</code> <p>Whether or not the client is closed.</p> <code>avatars</code> <code>Avatars</code> <p>The <code>avatars</code> endpoint.</p> <code>guilds</code> <code>Guilds</code> <p>The <code>guilds</code> endpoint.</p> <code>ksoft</code> <code>KSoft</code> <p>The <code>ksoft</code> endpoint.</p> <code>users</code> <code>Users</code> <p>The <code>users</code> endpoint.</p> <code>urls</code> <code>URLs</code> <p>The <code>urls</code> endpoint.</p> <code>tokens</code> <code>Tokens</code> <p>The <code>tokens</code> endpoint.</p>"},{"location":"reference/client/#ravyapi.client.Client.avatars","title":"avatars  <code>property</code>","text":"<pre><code>avatars: Avatars\n</code></pre> <p>The <code>avatars</code> endpoint.</p>"},{"location":"reference/client/#ravyapi.client.Client.closed","title":"closed  <code>property</code>","text":"<pre><code>closed: bool\n</code></pre> <p>Whether or not the client is closed.</p>"},{"location":"reference/client/#ravyapi.client.Client.guilds","title":"guilds  <code>property</code>","text":"<pre><code>guilds: Guilds\n</code></pre> <p>The <code>guilds</code> endpoint.</p>"},{"location":"reference/client/#ravyapi.client.Client.ksoft","title":"ksoft  <code>property</code>","text":"<pre><code>ksoft: KSoft\n</code></pre> <p>The <code>ksoft</code> endpoint.</p>"},{"location":"reference/client/#ravyapi.client.Client.tokens","title":"tokens  <code>property</code>","text":"<pre><code>tokens: Tokens\n</code></pre> <p>The <code>tokens</code> endpoint.</p>"},{"location":"reference/client/#ravyapi.client.Client.urls","title":"urls  <code>property</code>","text":"<pre><code>urls: URLs\n</code></pre> <p>The <code>urls</code> endpoint.</p>"},{"location":"reference/client/#ravyapi.client.Client.users","title":"users  <code>property</code>","text":"<pre><code>users: Users\n</code></pre> <p>The <code>users</code> endpoint.</p>"},{"location":"reference/client/#ravyapi.client.Client.__init__","title":"__init__","text":"<pre><code>__init__(token: str) -&gt; None\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>The token used to authenticate with the API.</p> required"},{"location":"reference/client/#ravyapi.client.Client.close","title":"close  <code>async</code>","text":"<pre><code>close() -&gt; None\n</code></pre> <p>Closes the client, shutting down the underlying HTTP client.</p>"},{"location":"reference/client/#ravyapi.client.Client.set_phisherman_token","title":"set_phisherman_token","text":"<pre><code>set_phisherman_token(token: str) -&gt; Client\n</code></pre> <p>Sets the phisherman token for the client.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>The phisherman token to set.</p> required <p>Returns:</p> Type Description <code>Client</code> <p>The client with the phisherman token set.</p>"},{"location":"reference/api/errors/","title":"Errors","text":"<p>Exceptions raised when an error is encountered during API calls.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.AccessError","title":"AccessError","text":"<p>               Bases: <code>Exception</code></p> <p>A class denoting an exception raised when required permission is not satisfied.</p> <p>Attributes:</p> Name Type Description <code>required</code> <code>str</code> <p>The required permission for a path route.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.AccessError.required","title":"required  <code>property</code>","text":"<pre><code>required: str\n</code></pre> <p>The required permission for a path route.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.AccessError.__init__","title":"__init__","text":"<pre><code>__init__(required: str) -&gt; None\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>required</code> <code>str</code> <p>The permission that was needed.</p> required"},{"location":"reference/api/errors/#ravyapi.api.errors.BadRequestError","title":"BadRequestError","text":"<p>               Bases: <code>HTTPError</code></p> <p>A class denoting an exception raised when a bad request is made.</p> <p>Attributes:</p> Name Type Description <code>exc_data</code> <code>str | dict[str, Any]</code> <p>The error data returned by the Ravy API.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.BadRequestError.exc_data","title":"exc_data  <code>property</code>","text":"<pre><code>exc_data: str | dict[str, Any]\n</code></pre> <p>The error data returned by the Ravy API.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.BadRequestError.status","title":"status  <code>property</code>","text":"<pre><code>status: int\n</code></pre> <p>The HTTP status code of the response.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.BadRequestError.__init__","title":"__init__","text":"<pre><code>__init__(exc_data: str | dict[str, Any]) -&gt; None\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>exc_data</code> <code>str | dict[str, Any]</code> <p>The error data returned by the Ravy API.</p> required"},{"location":"reference/api/errors/#ravyapi.api.errors.ForbiddenError","title":"ForbiddenError","text":"<p>               Bases: <code>HTTPError</code></p> <p>A class denoting an exception raised when a forbidden request is made.</p> <p>Attributes:</p> Name Type Description <code>exc_data</code> <code>str | dict[str, Any]</code> <p>The error data returned by the Ravy API.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.ForbiddenError.exc_data","title":"exc_data  <code>property</code>","text":"<pre><code>exc_data: str | dict[str, Any]\n</code></pre> <p>The error data returned by the Ravy API.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.ForbiddenError.status","title":"status  <code>property</code>","text":"<pre><code>status: int\n</code></pre> <p>The HTTP status code of the response.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.ForbiddenError.__init__","title":"__init__","text":"<pre><code>__init__(exc_data: str | dict[str, Any]) -&gt; None\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>exc_data</code> <code>str | dict[str, Any]</code> <p>The error data returned by the Ravy API.</p> required"},{"location":"reference/api/errors/#ravyapi.api.errors.HTTPError","title":"HTTPError","text":"<p>               Bases: <code>Exception</code></p> <p>A base class for all HTTP exceptions.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>int</code> <p>The HTTP status code of the response.</p> required <code>exc_data</code> <code>str | dict[str, Any]</code> <p>The error data returned by the Ravy API.</p> required <p>Attributes:</p> Name Type Description <code>status</code> <code>int</code> <p>The HTTP status code of the response.</p> <code>exc_data</code> <code>str | dict[str, Any]</code> <p>The error data returned by the Ravy API.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.HTTPError.exc_data","title":"exc_data  <code>property</code>","text":"<pre><code>exc_data: str | dict[str, Any]\n</code></pre> <p>The error data returned by the Ravy API.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.HTTPError.status","title":"status  <code>property</code>","text":"<pre><code>status: int\n</code></pre> <p>The HTTP status code of the response.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.HTTPError.__init__","title":"__init__","text":"<pre><code>__init__(status: int, exc_data: str | dict[str, Any]) -&gt; None\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>int</code> <p>The HTTP status code of the response.</p> required <code>exc_data</code> <code>str | dict[str, Any]</code> <p>The error data returned by the Ravy API.</p> required"},{"location":"reference/api/errors/#ravyapi.api.errors.NotFoundError","title":"NotFoundError","text":"<p>               Bases: <code>HTTPError</code></p> <p>A class denoting an exception raised when a resource is not found.</p> <p>Attributes:</p> Name Type Description <code>exc_data</code> <code>str | dict[str, Any]</code> <p>The error data returned by the Ravy API.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.NotFoundError.exc_data","title":"exc_data  <code>property</code>","text":"<pre><code>exc_data: str | dict[str, Any]\n</code></pre> <p>The error data returned by the Ravy API.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.NotFoundError.status","title":"status  <code>property</code>","text":"<pre><code>status: int\n</code></pre> <p>The HTTP status code of the response.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.NotFoundError.__init__","title":"__init__","text":"<pre><code>__init__(exc_data: str | dict[str, Any]) -&gt; None\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>exc_data</code> <code>str | dict[str, Any]</code> <p>The error data returned by the Ravy API.</p> required"},{"location":"reference/api/errors/#ravyapi.api.errors.TooManyRequestsError","title":"TooManyRequestsError","text":"<p>               Bases: <code>HTTPError</code></p> <p>A class denoting an exception raised when a request is made too frequently.</p> <p>Attributes:</p> Name Type Description <code>exc_data</code> <code>str | dict[str, Any]</code> <p>The error data returned by the Ravy API.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.TooManyRequestsError.exc_data","title":"exc_data  <code>property</code>","text":"<pre><code>exc_data: str | dict[str, Any]\n</code></pre> <p>The error data returned by the Ravy API.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.TooManyRequestsError.status","title":"status  <code>property</code>","text":"<pre><code>status: int\n</code></pre> <p>The HTTP status code of the response.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.TooManyRequestsError.__init__","title":"__init__","text":"<pre><code>__init__(exc_data: str | dict[str, Any]) -&gt; None\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>exc_data</code> <code>str | dict[str, Any]</code> <p>The error data returned by the Ravy API.</p> required"},{"location":"reference/api/errors/#ravyapi.api.errors.UnauthorizedError","title":"UnauthorizedError","text":"<p>               Bases: <code>HTTPError</code></p> <p>A class denoting an exception raised when an unauthorized request is made.</p> <p>Attributes:</p> Name Type Description <code>exc_data</code> <code>str | dict[str, Any]</code> <p>The error data returned by the Ravy API.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.UnauthorizedError.exc_data","title":"exc_data  <code>property</code>","text":"<pre><code>exc_data: str | dict[str, Any]\n</code></pre> <p>The error data returned by the Ravy API.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.UnauthorizedError.status","title":"status  <code>property</code>","text":"<pre><code>status: int\n</code></pre> <p>The HTTP status code of the response.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.UnauthorizedError.__init__","title":"__init__","text":"<pre><code>__init__(exc_data: str | dict[str, Any]) -&gt; None\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>exc_data</code> <code>str | dict[str, Any]</code> <p>The error data returned by the Ravy API.</p> required"},{"location":"reference/api/endpoints/avatars/","title":"Avatars","text":"<p>Implementations for the <code>avatars</code> endpoint.</p>"},{"location":"reference/api/endpoints/avatars/#ravyapi.api.endpoints.avatars.Avatars","title":"Avatars","text":"<p>               Bases: <code>HTTPAwareEndpoint</code></p> <p>A class with implementations for the <code>avatars</code> endpoint.</p>"},{"location":"reference/api/endpoints/avatars/#ravyapi.api.endpoints.avatars.Avatars.check_avatar","title":"check_avatar  <code>async</code>","text":"<pre><code>check_avatar(avatar: str | bytes, threshold: float = 0.97, method: Literal['ssim', 'phash'] = 'phash') -&gt; CheckAvatarResponse\n</code></pre> <p>Check if avatar is fraudulent.</p> <p>Parameters:</p> Name Type Description Default <code>avatar</code> <code>str | bytes</code> <p>Link to the avatar, should start with \"cdn.discordapp.com\" or the avatar to query, as an octet stream.</p> required <code>threshold</code> <code>float = 0.97</code> <p>How similar the avatar needs to be for it to match (0-1, default 0.97).</p> <code>0.97</code> <code>method</code> <code>Literal['ssim', 'phash']</code> <p>Which method to use for matching the avatars (\"ssim\" or \"phash\", default is \"phash\").</p> <code>'phash'</code> <p>Raises:</p> Type Description <code>TypeError</code> <p>If any parameters are of invalid types.</p> <code>ValueError</code> <p>If any parameters are invalid values.</p> <p>Returns:</p> Type Description <code>CheckAvatarResponse</code> <p>A model response from <code>ravyapi.api.endpoints.avatars.Avatars.check_avatar</code>. Located as <code>ravyapi.api.models.avatars.CheckAvatarResponse</code>.</p>"},{"location":"reference/api/endpoints/guilds/","title":"Guilds","text":"<p>Implementations for the <code>guilds</code> endpoint.</p>"},{"location":"reference/api/endpoints/guilds/#ravyapi.api.endpoints.guilds.Guilds","title":"Guilds","text":"<p>               Bases: <code>HTTPAwareEndpoint</code></p> <p>A class with implementations for the <code>guilds</code> endpoint.</p>"},{"location":"reference/api/endpoints/guilds/#ravyapi.api.endpoints.guilds.Guilds.get_guild","title":"get_guild  <code>async</code>","text":"<pre><code>get_guild(guild_id: int) -&gt; GetGuildResponse\n</code></pre> <p>Get extensive guild information.</p> <p>Parameters:</p> Name Type Description Default <code>guild_id</code> <code>int</code> <p>Guild ID of the guild to look up.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If any parameters are of invalid types.</p> <p>Returns:</p> Type Description <code>GetGuildResponse</code> <p>A model response from <code>ravyapi.api.endpoints.guilds.Guilds.get_guild</code>. Located as <code>ravyapi.api.models.guilds.GetGuildResponse</code>.</p>"},{"location":"reference/api/endpoints/ksoft/","title":"Ksoft","text":"<p>Implementations for the <code>ksoft</code> endpoint.</p>"},{"location":"reference/api/endpoints/ksoft/#ravyapi.api.endpoints.ksoft.KSoft","title":"KSoft","text":"<p>               Bases: <code>HTTPAwareEndpoint</code></p> <p>A class with implementations for the <code>ksoft</code> endpoint.</p>"},{"location":"reference/api/endpoints/ksoft/#ravyapi.api.endpoints.ksoft.KSoft.get_ban","title":"get_ban  <code>async</code>","text":"<pre><code>get_ban(user_id: int) -&gt; GetKSoftBanResponse\n</code></pre> <p>Get ban status.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>int</code> <p>User ID of the user to look up.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If any parameters are of invalid types.</p> <p>Returns:</p> Type Description <code>GetKSoftBanResponse</code> <p>A model response from <code>ravyapi.api.endpoints.ksoft.KSoft.get_ban</code>. Located as <code>ravyapi.api.models.ksoft.GetKSoftBanResponse</code>.</p>"},{"location":"reference/api/endpoints/tokens/","title":"Tokens","text":"<p>Implementations for the <code>tokens</code> endpoint.</p>"},{"location":"reference/api/endpoints/tokens/#ravyapi.api.endpoints.tokens.Tokens","title":"Tokens","text":"<p>               Bases: <code>HTTPAwareEndpoint</code></p> <p>A class with implementations for the <code>tokens</code> endpoint.</p>"},{"location":"reference/api/endpoints/tokens/#ravyapi.api.endpoints.tokens.Tokens.get_token","title":"get_token  <code>async</code>","text":"<pre><code>get_token() -&gt; GetTokenResponse\n</code></pre> <p>Get current token information.</p> <p>Returns:</p> Type Description <code>GetTokenResponse</code> <p>A model response from <code>ravyapi.api.endpoints.tokens.Tokens.get_token</code>. Located as <code>ravyapi.api.models.tokens.GetTokenResponse</code>.</p>"},{"location":"reference/api/endpoints/urls/","title":"Urls","text":"<p>Implementations for the <code>urls</code> endpoint.</p>"},{"location":"reference/api/endpoints/urls/#ravyapi.api.endpoints.urls.URLs","title":"URLs","text":"<p>               Bases: <code>HTTPAwareEndpoint</code></p> <p>A class with implementations for the <code>urls</code> endpoint.</p>"},{"location":"reference/api/endpoints/urls/#ravyapi.api.endpoints.urls.URLs.edit_website","title":"edit_website  <code>async</code>","text":"<pre><code>edit_website(url: str, *, is_fraudulent: bool, message: str, encode: bool = True) -&gt; None\n</code></pre> <p>Edit website information.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The url-encoded url to set data for.</p> required <code>is_fraudulent</code> <code>bool</code> <p>Whether the website is fraudulent.</p> required <code>message</code> <code>str</code> <p>An informational message about the website.</p> required <code>encode</code> <code>bool</code> <p>Whether to url-encode the parameter <code>url</code>.</p> <code>True</code> <p>Raises:</p> Type Description <code>TypeError</code> <p>If any parameters are of invalid types.</p> <code>ValueError</code> <p>If any parameters are invalid values.</p>"},{"location":"reference/api/endpoints/urls/#ravyapi.api.endpoints.urls.URLs.get_website","title":"get_website  <code>async</code>","text":"<pre><code>get_website(url: str, *, author: int | None = None, phisherman_user: int | None = None) -&gt; GetWebsiteResponse\n</code></pre> <p>Get website information.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The url-encoded url to look up.</p> required <code>author</code> <code>int | None</code> <p>Optional, the user that posted the message containing this URL (for auto banning, requires admin.users).</p> <code>None</code> <code>phisherman_user</code> <code>int | None</code> <p>Optional, required if <code>ravyapi.client.Client.set_phisherman_token</code> is called, Discord user ID of the token owner.</p> <code>None</code> <p>Raises:</p> Type Description <code>TypeError</code> <p>If any parameters are of invalid types.</p> <code>ValueError</code> <p>If any parameters are invalid values.</p> <p>Returns:</p> Type Description <code>GetWebsiteResponse</code> <p>A model response from <code>ravyapi.api.endpoints.urls.URLs.get_website</code>. Located as <code>ravyapi.api.models.urls.GetWebsiteResponse</code>.</p>"},{"location":"reference/api/endpoints/users/","title":"Users","text":"<p>Implementations for the <code>users</code> endpoint.</p>"},{"location":"reference/api/endpoints/users/#ravyapi.api.endpoints.users.Users","title":"Users","text":"<p>               Bases: <code>HTTPAwareEndpoint</code></p> <p>A class with implementations for the <code>users</code> endpoint.</p>"},{"location":"reference/api/endpoints/users/#ravyapi.api.endpoints.users.Users.add_ban","title":"add_ban  <code>async</code>","text":"<pre><code>add_ban(user_id: int, *, provider: str, reason: str, moderator: int, reason_key: str | None = None) -&gt; None\n</code></pre> <p>Add ban.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>int</code> <p>User ID of the user to ban.</p> required <code>provider</code> <code>str</code> <p>Source for where the user was banned.</p> required <code>reason</code> <code>str</code> <p>Why the user was banned.</p> required <code>moderator</code> <code>int</code> <p>User ID of the responsible moderator, usually Discord.</p> required <code>reason_key</code> <code>str | None</code> <p>Machine-readable version of the reason - only present for providers ravy and dservices.</p> <code>None</code> <p>Raises:</p> Type Description <code>TypeError</code> <p>If any parameters are of invalid types.</p> <code>ValueError</code> <p>If any parameters are invalid values.</p>"},{"location":"reference/api/endpoints/users/#ravyapi.api.endpoints.users.Users.get_bans","title":"get_bans  <code>async</code>","text":"<pre><code>get_bans(user_id: int) -&gt; GetBansResponse\n</code></pre> <p>Get bans.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>int</code> <p>User ID of the user to look up.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If any parameters are of invalid types.</p> <p>Returns:</p> Type Description <code>GetBansResponse</code> <p>A model response from <code>ravyapi.api.endpoints.users.Users.get_bans</code>. Located as <code>ravyapi.api.models.users.GetBansResponse</code>.</p>"},{"location":"reference/api/endpoints/users/#ravyapi.api.endpoints.users.Users.get_pronouns","title":"get_pronouns  <code>async</code>","text":"<pre><code>get_pronouns(user_id: int) -&gt; GetPronounsResponse\n</code></pre> <p>Get pronouns.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>int</code> <p>User ID of the user to look up.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If any parameters are of invalid types.</p> <p>Returns:</p> Type Description <code>GetPronounsResponse</code> <p>A model response from <code>ravyapi.api.endpoints.users.Users.get_pronouns</code>. Located as <code>ravyapi.api.models.users.GetPronounsResponse</code>.</p>"},{"location":"reference/api/endpoints/users/#ravyapi.api.endpoints.users.Users.get_reputation","title":"get_reputation  <code>async</code>","text":"<pre><code>get_reputation(user_id: int) -&gt; GetReputationResponse\n</code></pre> <p>Get reputation.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>int</code> <p>User ID of the user to look up.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If any parameters are of invalid types.</p> <p>Returns:</p> Type Description <code>GetReputationResponse</code> <p>A model response from <code>ravyapi.api.endpoints.users.Users.get_reputation</code>. Located as <code>ravyapi.api.models.users.GetReputationResponse</code>.</p>"},{"location":"reference/api/endpoints/users/#ravyapi.api.endpoints.users.Users.get_user","title":"get_user  <code>async</code>","text":"<pre><code>get_user(user_id: int) -&gt; GetUserResponse\n</code></pre> <p>Get extensive user information.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>int</code> <p>User ID of the user to look up.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If any parameters are of invalid types.</p> <p>Returns:</p> Type Description <code>GetUserResponse</code> <p>A model response from <code>ravyapi.api.endpoints.users.Users.get_user</code>. Located as <code>ravyapi.api.models.users.GetUserResponse</code>.</p>"},{"location":"reference/api/endpoints/users/#ravyapi.api.endpoints.users.Users.get_whitelists","title":"get_whitelists  <code>async</code>","text":"<pre><code>get_whitelists(user_id: int) -&gt; GetWhitelistsResponse\n</code></pre> <p>Get whitelists.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>int</code> <p>User ID of the user to look up.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If any parameters are of invalid types.</p> <p>Returns:</p> Type Description <code>GetWhitelistsResponse</code> <p>A model response from <code>ravyapi.api.endpoints.users.Users.get_whitelists</code>. Located as <code>ravyapi.api.models.users.GetWhitelistsResponse</code>.</p>"},{"location":"reference/api/models/avatars/","title":"Avatars","text":"<p>API models for the <code>avatars</code> endpoint.</p>"},{"location":"reference/api/models/avatars/#ravyapi.api.models.avatars.CheckAvatarResponse","title":"CheckAvatarResponse","text":"<p>A model response from <code>ravyapi.api.endpoints.avatars.Avatars.check_avatar</code>.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>dict[str, Any]</code> <p>The raw data returned from the Ravy API.</p> <code>matched</code> <code>bool</code> <p>Whether the avatar was matched.</p> <code>key</code> <code>str</code> <p>The avatar key that matched.</p> <code>similarity</code> <code>float</code> <p>Similarity of the avatar to the key, represented as a float between 0 and 1.</p>"},{"location":"reference/api/models/avatars/#ravyapi.api.models.avatars.CheckAvatarResponse.data","title":"data  <code>property</code>","text":"<pre><code>data: dict[str, Any]\n</code></pre> <p>The raw data returned from the Ravy API.</p>"},{"location":"reference/api/models/avatars/#ravyapi.api.models.avatars.CheckAvatarResponse.key","title":"key  <code>property</code>","text":"<pre><code>key: str | None\n</code></pre> <p>The avatar key that matched.</p>"},{"location":"reference/api/models/avatars/#ravyapi.api.models.avatars.CheckAvatarResponse.matched","title":"matched  <code>property</code>","text":"<pre><code>matched: bool\n</code></pre> <p>Whether the avatar was matched.</p>"},{"location":"reference/api/models/avatars/#ravyapi.api.models.avatars.CheckAvatarResponse.similarity","title":"similarity  <code>property</code>","text":"<pre><code>similarity: float | None\n</code></pre> <p>Similarity of the avatar to the key, represented as a float between 0 and 1.</p>"},{"location":"reference/api/models/guilds/","title":"Guilds","text":"<p>API models for the <code>guilds</code> endpoint.</p>"},{"location":"reference/api/models/guilds/#ravyapi.api.models.guilds.GetGuildResponse","title":"GetGuildResponse","text":"<p>A model response from <code>ravyapi.api.endpoints.guilds.Guilds.get_guild</code>.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>dict[str, Any]</code> <p>The raw data returned from the Ravy API.</p> <code>trust</code> <code>Trust</code> <p>The guild's <code>ravyapi.api.models.generic.trust.Trust</code> trust model.</p> <code>bans</code> <code>list[BanEntryResponse]</code> <p>A list of the guild's <code>ravyapi.api.models.generic.ban_entry.BanEntryResponse</code> ban models.</p>"},{"location":"reference/api/models/guilds/#ravyapi.api.models.guilds.GetGuildResponse.bans","title":"bans  <code>property</code>","text":"<pre><code>bans: list[BanEntryResponse]\n</code></pre> <p>A list of the guilds's <code>ravyapi.api.models.generic.ban_entry.BanEntryResponse</code> ban models.</p>"},{"location":"reference/api/models/guilds/#ravyapi.api.models.guilds.GetGuildResponse.data","title":"data  <code>property</code>","text":"<pre><code>data: dict[str, Any]\n</code></pre> <p>The raw data returned from the Ravy API.</p>"},{"location":"reference/api/models/guilds/#ravyapi.api.models.guilds.GetGuildResponse.trust","title":"trust  <code>property</code>","text":"<pre><code>trust: Trust\n</code></pre> <p>The guild's <code>ravyapi.api.models.generic.trust.Trust</code> trust model.</p>"},{"location":"reference/api/models/ksoft/","title":"Ksoft","text":"<p>API models for the <code>ksoft</code> endpoint.</p>"},{"location":"reference/api/models/ksoft/#ravyapi.api.models.ksoft.GetKSoftBanResponse","title":"GetKSoftBanResponse","text":"<p>A model response from <code>ravyapi.api.endpoints.ksoft.KSoft.get_ban</code>.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>dict[str, Any]</code> <p>The raw data returned from the Ravy API.</p> <code>found</code> <code>bool</code> <p>Whether the user was found in the database.</p> <code>user_id</code> <code>int | None</code> <p>The user's ID, if found.</p> <code>tag</code> <code>str | None</code> <p>The user's tag, if found.</p> <code>reason</code> <code>str | None</code> <p>Reason for the ban, if found.</p> <code>proof</code> <code>str | None</code> <p>Evidence for the ban, if found.</p> <code>moderator</code> <code>int | None</code> <p>User ID of the responsible moderator, if found.</p> <code>severe</code> <code>bool | None</code> <p>Whether the ban is severe, if found.</p> <code>timestamp</code> <code>str | None</code> <p>A timestamp of the ban, if found.</p>"},{"location":"reference/api/models/ksoft/#ravyapi.api.models.ksoft.GetKSoftBanResponse.data","title":"data  <code>property</code>","text":"<pre><code>data: dict[str, Any]\n</code></pre> <p>The raw data returned from the Ravy API.</p>"},{"location":"reference/api/models/ksoft/#ravyapi.api.models.ksoft.GetKSoftBanResponse.found","title":"found  <code>property</code>","text":"<pre><code>found: bool\n</code></pre> <p>Whether the user was found in the database.</p>"},{"location":"reference/api/models/ksoft/#ravyapi.api.models.ksoft.GetKSoftBanResponse.moderator","title":"moderator  <code>property</code>","text":"<pre><code>moderator: int | None\n</code></pre> <p>User ID of the responsible moderator, if found.</p>"},{"location":"reference/api/models/ksoft/#ravyapi.api.models.ksoft.GetKSoftBanResponse.proof","title":"proof  <code>property</code>","text":"<pre><code>proof: str | None\n</code></pre> <p>Evidence for the ban, if found.</p>"},{"location":"reference/api/models/ksoft/#ravyapi.api.models.ksoft.GetKSoftBanResponse.reason","title":"reason  <code>property</code>","text":"<pre><code>reason: str | None\n</code></pre> <p>Reason for the ban, if found.</p>"},{"location":"reference/api/models/ksoft/#ravyapi.api.models.ksoft.GetKSoftBanResponse.severe","title":"severe  <code>property</code>","text":"<pre><code>severe: bool | None\n</code></pre> <p>Whether the ban is severe, if found.</p>"},{"location":"reference/api/models/ksoft/#ravyapi.api.models.ksoft.GetKSoftBanResponse.tag","title":"tag  <code>property</code>","text":"<pre><code>tag: str | None\n</code></pre> <p>The user's tag, if found.</p>"},{"location":"reference/api/models/ksoft/#ravyapi.api.models.ksoft.GetKSoftBanResponse.timestamp","title":"timestamp  <code>property</code>","text":"<pre><code>timestamp: str | None\n</code></pre> <p>A timestamp of the ban, if found.</p>"},{"location":"reference/api/models/ksoft/#ravyapi.api.models.ksoft.GetKSoftBanResponse.user_id","title":"user_id  <code>property</code>","text":"<pre><code>user_id: int | None\n</code></pre> <p>The user's ID, if found.</p>"},{"location":"reference/api/models/tokens/","title":"Tokens","text":"<p>API models for the <code>tokens</code> endpoint.</p>"},{"location":"reference/api/models/tokens/#ravyapi.api.models.tokens.GetTokenResponse","title":"GetTokenResponse","text":"<p>A model response from <code>ravyapi.api.endpoints.tokens.Tokens.get_token</code>.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>dict[str, Any]</code> <p>The raw data returned from the Ravy API.</p> <code>user</code> <code>str</code> <p>The user ID associated with the token.</p> <code>access</code> <code>list[str]</code> <p>A list of valid permission nodes for the token.</p> <code>application</code> <code>int</code> <p>The application ID registered to the token.</p> <code>token_type</code> <code>Literal['ravy', 'ksoft']</code> <p>The type of the token, either \"ravy\" or \"ksoft.\"</p>"},{"location":"reference/api/models/tokens/#ravyapi.api.models.tokens.GetTokenResponse.access","title":"access  <code>property</code>","text":"<pre><code>access: list[str]\n</code></pre> <p>A list of valid permission nodes for the token.</p>"},{"location":"reference/api/models/tokens/#ravyapi.api.models.tokens.GetTokenResponse.application","title":"application  <code>property</code>","text":"<pre><code>application: int\n</code></pre> <p>The application ID registered to the token.</p>"},{"location":"reference/api/models/tokens/#ravyapi.api.models.tokens.GetTokenResponse.data","title":"data  <code>property</code>","text":"<pre><code>data: dict[str, Any]\n</code></pre> <p>The raw data returned from the Ravy API.</p>"},{"location":"reference/api/models/tokens/#ravyapi.api.models.tokens.GetTokenResponse.token_type","title":"token_type  <code>property</code>","text":"<pre><code>token_type: Literal['ravy', 'ksoft']\n</code></pre> <p>The type of the token, either \"ravy\" or \"ksoft.\"</p>"},{"location":"reference/api/models/tokens/#ravyapi.api.models.tokens.GetTokenResponse.user","title":"user  <code>property</code>","text":"<pre><code>user: int\n</code></pre> <p>The user ID associated with the token.</p>"},{"location":"reference/api/models/urls/","title":"Urls","text":"<p>API models for the <code>urls</code> endpoint.</p>"},{"location":"reference/api/models/urls/#ravyapi.api.models.urls.EditWebsiteRequest","title":"EditWebsiteRequest","text":"<p>A model request to <code>ravyapi.api.endpoints.urls.URLs.edit_website</code>.</p> <p>Parameters:</p> Name Type Description Default <code>is_fraudulent</code> <code>bool</code> <p>Whether the website is fraudulent.</p> required <code>message</code> <code>str</code> <p>An informational message about the website.</p> required <p>Attributes:</p> Name Type Description <code>is_fraudulent</code> <code>bool</code> <p>Whether the website is fraudulent.</p> <code>message</code> <code>str</code> <p>An informational message about the website.</p>"},{"location":"reference/api/models/urls/#ravyapi.api.models.urls.EditWebsiteRequest.is_fraudulent","title":"is_fraudulent  <code>property</code>","text":"<pre><code>is_fraudulent: bool\n</code></pre> <p>Whether the website is fraudulent.</p>"},{"location":"reference/api/models/urls/#ravyapi.api.models.urls.EditWebsiteRequest.message","title":"message  <code>property</code>","text":"<pre><code>message: str\n</code></pre> <p>An informational message about the website.</p>"},{"location":"reference/api/models/urls/#ravyapi.api.models.urls.EditWebsiteRequest.__init__","title":"__init__","text":"<pre><code>__init__(is_fraudulent: bool, message: str) -&gt; None\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>is_fraudulent</code> <code>bool</code> <p>Whether the website is fraudulent.</p> required <code>message</code> <code>str</code> <p>An informational message about the website.</p> required"},{"location":"reference/api/models/urls/#ravyapi.api.models.urls.EditWebsiteRequest.to_json","title":"to_json","text":"<pre><code>to_json() -&gt; dict[str, Any]\n</code></pre> <p>Returns a JSON representation of the model.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>A JSON representation of the model.</p>"},{"location":"reference/api/models/urls/#ravyapi.api.models.urls.GetWebsiteResponse","title":"GetWebsiteResponse","text":"<p>A model response from <code>ravyapi.api.endpoints.urls.URLs.get_website</code>.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>dict[str, Any]</code> <p>The raw data returned from the Ravy API.</p> <code>is_fraudulent</code> <code>bool</code> <p>Whether the website is fraudulent.</p> <code>message</code> <code>str</code> <p>An informational message about the website.</p>"},{"location":"reference/api/models/urls/#ravyapi.api.models.urls.GetWebsiteResponse.data","title":"data  <code>property</code>","text":"<pre><code>data: dict[str, Any]\n</code></pre> <p>The raw data returned from the Ravy API.</p>"},{"location":"reference/api/models/urls/#ravyapi.api.models.urls.GetWebsiteResponse.is_fraudulent","title":"is_fraudulent  <code>property</code>","text":"<pre><code>is_fraudulent: bool\n</code></pre> <p>Whether the website is fraudulent.</p>"},{"location":"reference/api/models/urls/#ravyapi.api.models.urls.GetWebsiteResponse.message","title":"message  <code>property</code>","text":"<pre><code>message: str\n</code></pre> <p>An informational message about the website.</p>"},{"location":"reference/api/models/users/","title":"Users","text":"<p>API models for the <code>users</code> endpoint.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetBansResponse","title":"GetBansResponse","text":"<p>A model response from <code>ravyapi.api.endpoints.users.Users.get_bans</code>.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>dict[str, Any]</code> <p>The raw data returned from the Ravy API.</p> <code>trust</code> <code>Trust</code> <p>The user's <code>ravyapi.api.models.generic.trust.Trust</code> trust model.</p> <code>bans</code> <code>list[BanEntryResponse]</code> <p>A list of the user's <code>ravyapi.api.models.generic.ban_entry.BanEntryResponse</code> ban models.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetBansResponse.bans","title":"bans  <code>property</code>","text":"<pre><code>bans: list[BanEntryResponse]\n</code></pre> <p>A list of the user's <code>ravyapi.api.models.generic.ban_entry.BanEntryResponse</code> ban models.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetBansResponse.data","title":"data  <code>property</code>","text":"<pre><code>data: dict[str, Any]\n</code></pre> <p>The raw data returned from the Ravy API.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetBansResponse.trust","title":"trust  <code>property</code>","text":"<pre><code>trust: Trust\n</code></pre> <p>The user's <code>ravyapi.api.models.generic.trust.Trust</code> trust model.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetPronounsResponse","title":"GetPronounsResponse","text":"<p>A model response from <code>ravyapi.api.endpoints.users.Users.get_pronouns</code>.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>dict[str, Any]</code> <p>The raw data returned from the Ravy API.</p> <code>pronouns</code> <code>str</code> <p>The user's pronouns.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetPronounsResponse.data","title":"data  <code>property</code>","text":"<pre><code>data: dict[str, Any]\n</code></pre> <p>The raw data returned from the Ravy API.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetPronounsResponse.pronouns","title":"pronouns  <code>property</code>","text":"<pre><code>pronouns: str\n</code></pre> <p>The user's pronouns.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetReputationResponse","title":"GetReputationResponse","text":"<p>A model response from <code>ravyapi.api.endpoints.users.Users.get_reputation</code>.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>dict[str, Any]</code> <p>The raw data returned from the Ravy API.</p> <code>rep</code> <code>list[ReputationEntry]</code> <p>A list of the user's <code>ravyapi.api.models.users.ReputationEntry</code> reputation models.</p> <code>trust</code> <code>Trust</code> <p>The user's <code>ravyapi.api.models.generic.trust.Trust</code> trust model.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetReputationResponse.data","title":"data  <code>property</code>","text":"<pre><code>data: dict[str, Any]\n</code></pre> <p>The raw data returned from the Ravy API.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetReputationResponse.rep","title":"rep  <code>property</code>","text":"<pre><code>rep: list[ReputationEntry]\n</code></pre> <p>A list of the user's <code>ravyapi.api.models.users.ReputationEntry</code> reputation models.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetReputationResponse.trust","title":"trust  <code>property</code>","text":"<pre><code>trust: Trust\n</code></pre> <p>The user's <code>ravyapi.api.models.generic.trust.Trust</code> trust model.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetUserResponse","title":"GetUserResponse","text":"<p>A model response from <code>ravyapi.api.endpoints.users.Users.get_user</code>.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>dict[str, Any]</code> <p>The raw data returned from the Ravy API.</p> <code>pronouns</code> <code>str</code> <p>The user's pronouns.</p> <code>trust</code> <code>Trust</code> <p>The user's <code>ravyapi.api.models.generic.trust.Trust</code> trust model.</p> <code>whitelists</code> <code>list[WhitelistEntry]</code> <p>A list of the user's <code>ravyapi.api.models.users.WhitelistEntry</code> whitelist models.</p> <code>bans</code> <code>list[BanEntryResponse]</code> <p>A list of the user's <code>ravyapi.api.models.generic.ban_entry.BanEntryResponse</code> ban models.</p> <code>rep</code> <code>list[ReputationEntry]</code> <p>A list of the user's <code>ravyapi.api.models.users.ReputationEntry</code> reputation models.</p> <code>sentinel</code> <code>SentinelEntry</code> <p>The user's <code>ravyapi.api.models.users.SentinelEntry</code> sentinel model.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetUserResponse.bans","title":"bans  <code>property</code>","text":"<pre><code>bans: list[BanEntryResponse]\n</code></pre> <p>A list of the user's <code>ravyapi.api.models.generic.ban_entry.BanEntryResponse</code> ban models.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetUserResponse.data","title":"data  <code>property</code>","text":"<pre><code>data: dict[str, Any]\n</code></pre> <p>The raw data returned from the Ravy API.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetUserResponse.pronouns","title":"pronouns  <code>property</code>","text":"<pre><code>pronouns: str\n</code></pre> <p>The user's pronouns.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetUserResponse.rep","title":"rep  <code>property</code>","text":"<pre><code>rep: list[ReputationEntry]\n</code></pre> <p>A list of the user's <code>ravyapi.api.models.users.ReputationEntry</code> reputation models.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetUserResponse.sentinel","title":"sentinel  <code>property</code>","text":"<pre><code>sentinel: SentinelEntry\n</code></pre> <p>The user's <code>ravyapi.api.models.users.SentinelEntry</code> sentinel model.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetUserResponse.trust","title":"trust  <code>property</code>","text":"<pre><code>trust: Trust\n</code></pre> <p>The user's <code>ravyapi.api.models.generic.trust.Trust</code> trust model.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetUserResponse.whitelists","title":"whitelists  <code>property</code>","text":"<pre><code>whitelists: list[WhitelistEntry]\n</code></pre> <p>A list of the user's <code>ravyapi.api.models.users.WhitelistEntry</code> whitelist models.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetWhitelistsResponse","title":"GetWhitelistsResponse","text":"<p>A model response from <code>ravyapi.api.endpoints.users.Users.get_whitelists</code>.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>dict[str, Any]</code> <p>The raw data returned from the Ravy API.</p> <code>whitelists</code> <code>list[WhitelistEntry]</code> <p>A list of the user's <code>ravyapi.api.models.users.WhitelistEntry</code> whitelist models.</p> <code>trust</code> <code>Trust</code> <p>The user's <code>ravyapi.api.models.generic.trust.Trust</code> trust model.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetWhitelistsResponse.data","title":"data  <code>property</code>","text":"<pre><code>data: dict[str, Any]\n</code></pre> <p>The raw data returned from the Ravy API.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetWhitelistsResponse.trust","title":"trust  <code>property</code>","text":"<pre><code>trust: Trust\n</code></pre> <p>The user's <code>ravyapi.api.models.generic.trust.Trust</code> trust model.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetWhitelistsResponse.whitelists","title":"whitelists  <code>property</code>","text":"<pre><code>whitelists: list[WhitelistEntry]\n</code></pre> <p>A list of the user's <code>ravyapi.api.models.users.WhitelistEntry</code> whitelist models.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.ReputationEntry","title":"ReputationEntry","text":"<p>A model for a user's reputation entry.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>dict[str, Any]</code> <p>The raw data returned from the Ravy API.</p> <code>provider</code> <code>str</code> <p>Source for the reputation data.</p> <code>score</code> <code>float</code> <p>Normalized value (0-1) for reputation of the user, 0.5 is default.</p> <code>upvotes</code> <code>int | None</code> <p>Amount of upvotes this user has received, optional.</p> <code>downvotes</code> <code>int | None</code> <p>Amount of downvotes this user has received, optional.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.ReputationEntry.data","title":"data  <code>property</code>","text":"<pre><code>data: dict[str, Any]\n</code></pre> <p>The raw data returned from the Ravy API.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.ReputationEntry.downvotes","title":"downvotes  <code>property</code>","text":"<pre><code>downvotes: int | None\n</code></pre> <p>Amount of downvotes this user has received, optional.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.ReputationEntry.provider","title":"provider  <code>property</code>","text":"<pre><code>provider: str\n</code></pre> <p>Source for the reputation data.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.ReputationEntry.score","title":"score  <code>property</code>","text":"<pre><code>score: float\n</code></pre> <p>Normalized value (0-1) for reputation of the user, 0.5 is default.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.ReputationEntry.upvotes","title":"upvotes  <code>property</code>","text":"<pre><code>upvotes: int | None\n</code></pre> <p>Amount of upvotes this user has received, optional.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.SentinelEntry","title":"SentinelEntry","text":"<p>A model for a user's sentinel entry.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>dict[str, Any]</code> <p>The raw data returned from the Ravy API.</p> <code>verified</code> <code>bool</code> <p>Whether this user has linked their account to sentinel.</p> <code>internal_id</code> <code>str</code> <p>Internal ID for debug purposes.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.SentinelEntry.data","title":"data  <code>property</code>","text":"<pre><code>data: dict[str, Any]\n</code></pre> <p>The raw data returned from the Ravy API.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.SentinelEntry.internal_id","title":"internal_id  <code>property</code>","text":"<pre><code>internal_id: str\n</code></pre> <p>Internal ID for debug purposes.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.SentinelEntry.verified","title":"verified  <code>property</code>","text":"<pre><code>verified: bool\n</code></pre> <p>Whether this user has linked their account to sentinel.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.WhitelistEntry","title":"WhitelistEntry","text":"<p>A model for a user's whitelist entry.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>dict[str, Any]</code> <p>The raw data returned from the Ravy API.</p> <code>provider</code> <code>str</code> <p>Source for where the user is whitelisted.</p> <code>reason</code> <code>str</code> <p>Why the user is whitelisted, usually STAFF.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.WhitelistEntry.data","title":"data  <code>property</code>","text":"<pre><code>data: dict[str, Any]\n</code></pre> <p>The raw data returned from the Ravy API.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.WhitelistEntry.provider","title":"provider  <code>property</code>","text":"<pre><code>provider: str\n</code></pre> <p>Source for where the user is whitelisted.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.WhitelistEntry.reason","title":"reason  <code>property</code>","text":"<pre><code>reason: str\n</code></pre> <p>Why the user is whitelisted, usually STAFF.</p>"},{"location":"reference/api/models/generic/ban_entry/","title":"Ban entry","text":"<p>Generic models for ban entries.</p>"},{"location":"reference/api/models/generic/ban_entry/#ravyapi.api.models.generic.ban_entry.BanEntryRequest","title":"BanEntryRequest","text":"<p>A generic model for ban entry requests.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>str</code> <p>Source for where the user or guild is banned.</p> required <code>reason</code> <code>str</code> <p>Why the user or guild is banned.</p> required <code>moderator</code> <code>int</code> <p>User ID of the responsible moderator, usually Discord.</p> required <code>reason_key</code> <code>str | None</code> <p>Machine-readable version of the reason - only present for providers ravy and dservices.</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>provider</code> <code>str</code> <p>Source for where the user or guild is banned.</p> <code>reason</code> <code>str</code> <p>Why the user or guild is banned.</p> <code>moderator</code> <code>int</code> <p>User ID of the responsible moderator, usually Discord.</p> <code>reason_key</code> <code>str | None</code> <p>Machine-readable version of the reason - only present for providers ravy and dservices.</p>"},{"location":"reference/api/models/generic/ban_entry/#ravyapi.api.models.generic.ban_entry.BanEntryRequest.moderator","title":"moderator  <code>property</code>","text":"<pre><code>moderator: int\n</code></pre> <p>User ID of the responsible moderator, usually Discord.</p>"},{"location":"reference/api/models/generic/ban_entry/#ravyapi.api.models.generic.ban_entry.BanEntryRequest.provider","title":"provider  <code>property</code>","text":"<pre><code>provider: str\n</code></pre> <p>Source for where the user or guild is banned.</p>"},{"location":"reference/api/models/generic/ban_entry/#ravyapi.api.models.generic.ban_entry.BanEntryRequest.reason","title":"reason  <code>property</code>","text":"<pre><code>reason: str\n</code></pre> <p>Why the user or guild is banned.</p>"},{"location":"reference/api/models/generic/ban_entry/#ravyapi.api.models.generic.ban_entry.BanEntryRequest.reason_key","title":"reason_key  <code>property</code>","text":"<pre><code>reason_key: str | None\n</code></pre> <p>Machine-readable version of the reason - only present for providers ravy and dservices.</p>"},{"location":"reference/api/models/generic/ban_entry/#ravyapi.api.models.generic.ban_entry.BanEntryRequest.__init__","title":"__init__","text":"<pre><code>__init__(provider: str, reason: str, moderator: int, reason_key: str | None = None) -&gt; None\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>str</code> <p>Source for where the user or guild is banned.</p> required <code>reason</code> <code>str</code> <p>Why the user or guild is banned.</p> required <code>moderator</code> <code>int</code> <p>User ID of the responsible moderator, usually Discord.</p> required <code>reason_key</code> <code>str | None</code> <p>Machine-readable version of the reason - only present for providers ravy and dservices.</p> <code>None</code>"},{"location":"reference/api/models/generic/ban_entry/#ravyapi.api.models.generic.ban_entry.BanEntryRequest.to_json","title":"to_json","text":"<pre><code>to_json() -&gt; dict[str, Any]\n</code></pre> <p>Returns a JSON representation of the model.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>A JSON representation of the model.</p>"},{"location":"reference/api/models/generic/ban_entry/#ravyapi.api.models.generic.ban_entry.BanEntryResponse","title":"BanEntryResponse","text":"<p>A generic model for ban entry responses.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>dict[str, Any]</code> <p>The raw data returned from the Ravy API.</p> <code>provider</code> <code>str</code> <p>Source for where the user or guild was banned.</p> <code>reason</code> <code>str</code> <p>Why the user or guild was banned.</p> <code>reason_key</code> <code>str | None</code> <p>Machine-readable version of the reason - only present for providers ravy and dservices.</p> <code>moderator</code> <code>int</code> <p>User ID of the responsible moderator, usually Discord.</p>"},{"location":"reference/api/models/generic/ban_entry/#ravyapi.api.models.generic.ban_entry.BanEntryResponse.data","title":"data  <code>property</code>","text":"<pre><code>data: dict[str, Any]\n</code></pre> <p>The raw data returned from the Ravy API.</p>"},{"location":"reference/api/models/generic/ban_entry/#ravyapi.api.models.generic.ban_entry.BanEntryResponse.moderator","title":"moderator  <code>property</code>","text":"<pre><code>moderator: int\n</code></pre> <p>User ID of the responsible moderator, usually Discord.</p>"},{"location":"reference/api/models/generic/ban_entry/#ravyapi.api.models.generic.ban_entry.BanEntryResponse.provider","title":"provider  <code>property</code>","text":"<pre><code>provider: str\n</code></pre> <p>Source for where the user or guild was banned.</p>"},{"location":"reference/api/models/generic/ban_entry/#ravyapi.api.models.generic.ban_entry.BanEntryResponse.reason","title":"reason  <code>property</code>","text":"<pre><code>reason: str\n</code></pre> <p>Why the user or guild was banned.</p>"},{"location":"reference/api/models/generic/ban_entry/#ravyapi.api.models.generic.ban_entry.BanEntryResponse.reason_key","title":"reason_key  <code>property</code>","text":"<pre><code>reason_key: str | None\n</code></pre> <p>Machine-readable version of the reason - only present for providers ravy and dservices.</p>"},{"location":"reference/api/models/generic/trust/","title":"Trust","text":"<p>A generic model for trust.</p>"},{"location":"reference/api/models/generic/trust/#ravyapi.api.models.generic.trust.Trust","title":"Trust","text":"<p>A generic model for trust.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>dict[str, Any]</code> <p>The raw data returned from the Ravy API.</p> <code>level</code> <code>int</code> <p>From 0-6, higher is better, default is 3.</p> <code>label</code> <code>str</code> <p>What the number means.</p>"},{"location":"reference/api/models/generic/trust/#ravyapi.api.models.generic.trust.Trust.data","title":"data  <code>property</code>","text":"<pre><code>data: dict[str, Any]\n</code></pre> <p>The raw data returned from the Ravy API.</p>"},{"location":"reference/api/models/generic/trust/#ravyapi.api.models.generic.trust.Trust.label","title":"label  <code>property</code>","text":"<pre><code>label: str\n</code></pre> <p>What the number means.</p>"},{"location":"reference/api/models/generic/trust/#ravyapi.api.models.generic.trust.Trust.level","title":"level  <code>property</code>","text":"<pre><code>level: int\n</code></pre> <p>From 0-6, higher is better, default is 3.</p>"}]}